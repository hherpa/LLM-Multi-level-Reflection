def format_step(step_num, title, content, as_code=False):
    formatted_content = content.strip()
    
    if as_code:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if formatted_content.startswith('```json'):
            formatted_content = formatted_content[7:]
        elif formatted_content.startswith('```'):
            formatted_content = formatted_content[3:]
        if formatted_content.endswith('```'):
            formatted_content = formatted_content[:-3]
        
        formatted_content = formatted_content.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not formatted_content.startswith('```'):
            formatted_content = f"```json\n{formatted_content}\n```"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–∫–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    return f"""### Step {step_num}: {title}

{formatted_content}

-----------------------------------"""

def format_final_message(steps_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    if isinstance(steps_data, str):
        return steps_data
        
    message = "# ü§î Reflection Complete\n\n"
    
    for step in steps_data:
        if isinstance(step, dict) and 'content' in step:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            content = step['content'].replace('---', '').strip()
            message += f"{content}\n\n=====================================\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    message += "\n# ‚ú® Reflection Process Complete"
    return message

def is_json_like(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ JSON"""
    text = text.strip()
    return text.startswith('{') and text.endswith('}') or text.startswith('[') and text.endswith(']') 